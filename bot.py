import logging
import sqlite3
import asyncio
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# States
(START_CHOICE, QUESTION_1, QUESTION_2, QUESTION_3, QUESTION_4, QUESTION_5, HELP, RESULT, MENU) = range(9)

# Questions and answers
questions = ['–ß—Ç–æ –≤–∑—è—Ç—å –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?', '–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å?', '–¢–≤–æ–π –≤—ã–±–æ—Ä –æ—Ç–¥—ã—Ö–∞?', '–õ—é–±–∏–º–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞?', '–¢–≤–æ–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è?']
answers = [
    [['–ö–æ–º–ø–∞—Å –∏ –∫–∞—Ä—Ç–∞ üß≠', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å'], ['–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –∏ –æ—á–∫–∏ üìö', '–ú—É–¥—Ä–µ—Ü'], ['–ö–æ—à–µ–ª–µ–∫ –∏ —Å—É–≤–µ–Ω–∏—Ä—ã üí∞', '–¢–æ—Ä–≥–æ–≤–µ—Ü']],
    [['–ü–æ—Ö–æ–¥ –Ω–∞ –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–µ üö∂‚Äç‚ôÇÔ∏è', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å'], ['–≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –º—É–∑–µ—è–º üèõ', '–ú—É–¥—Ä–µ—Ü'], ['–®–æ–ø–ø–∏–Ω–≥ –∏ —Ä—ã–Ω–∫–∏ üõçÔ∏è', '–¢–æ—Ä–≥–æ–≤–µ—Ü']],
    [['–ö–µ–º–ø–∏–Ω–≥ –≤ –ª–µ—Å—É üèïÔ∏è', '–ú–∏—Ä–æ–ª—é–±–µ—Ü'], ['–ê–ª—å–ø–∏–Ω–∏–∑–º –∏ –¥–∞–π–≤–∏–Ω–≥ üßó‚Äç‚ôÇÔ∏è', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–µ—Ü'], ['–ü–ª—è–∂ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è üèñÔ∏è', '–ú–∏—Ä–æ–ª—é–±–µ—Ü']],
    [['–õ–µ—Ç–æ, –ø–ª—è–∂–∏ –∏ —Å–æ–ª–Ω—Ü–µ ‚òÄÔ∏è', '–ú–∏—Ä–æ–ª—é–±–µ—Ü'], ['–ó–∏–º–∞, –≥–æ—Ä—ã –∏ —Å–Ω–æ—É–±–æ—Ä–¥ üèÇ', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–µ—Ü'], ['–í–µ—Å–Ω–∞, –ø–∞—Ä–∫–∏ –∏ —Ü–≤–µ—Ç—ã üå∏', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å']],
    [['–ü–µ—à–∫–æ–º –∏–ª–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥ üö¥', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å'], ['–ü–æ–µ–∑–¥–∞ –∏ –∞–≤—Ç–æ–±—É—Å—ã üöå', '–ú—É–¥—Ä–µ—Ü'], ['–ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞ üöó', '–¢–æ—Ä–≥–æ–≤–µ—Ü']]
]

def save_user_data(user_id, username, character_class, image_path):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("PRAGMA journal_mode=WAL")
    cursor.execute('''
        INSERT INTO users(user_id, username, class, image_path, speed, cunning, luck)
        VALUES(?,?,?,?,?,?,?)''', (user_id, username, character_class, image_path, 1, 1, 1))
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    if not is_user_registered(user_id):
        reply_keyboard = [['üß≠ –ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞', 'üÜò –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å']]
        await update.message.reply_text(
            '–ó–¥—Ä–∞–≤ –±—É–¥—å, –¥—Ä—É–∂–∏—â–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –±–æ–≥–∞—Ç—ã—Ä—å –∏–∑ –¥–∞–ª–µ–∫–∏—Ö —Å—Ç—Ä–∞–Ω—Å—Ç–≤–∏–π...',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
        )
        return START_CHOICE
    else:
        return await show_user_menu(update, context)

async def show_user_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT username, class, image_path, speed, cunning, luck FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    if user_data:
        username, character_class, image_path, speed, cunning, luck = user_data
        message = f"–ò–º—è: {username}\n–ö–ª–∞—Å—Å: {character_class}\n–°–∫–æ—Ä–æ—Å—Ç—å: {speed}, –•–∏—Ç—Ä–æ—Å—Ç—å: {cunning}, –£–¥–∞—á–∞: {luck}"
        await update.message.reply_text(message)
        if image_path and os.path.exists(image_path):
            await update.message.reply_photo(photo=open(image_path, 'rb'))
        else:
            await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    else:
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /register.")

def is_user_registered(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
    user_exists = cursor.fetchone() is not None
    conn.close()
    return user_exists

async def start_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.message.text
    if query == 'üß≠ –ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞':
        return await register(update, context)
    elif query == 'üÜò –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å':
        return await help(update, context)

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–ù–µ –≤–æ–ª–Ω—É–π—Å—è, —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ! –°–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!')
    return ConversationHandler.END

async def question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, question_number: int) -> int:
    logger.info(f"User {update.effective_user.id} is in QUESTION_{question_number}, answered: {update.message.text}")
    user_answer = update.message.text
    for answer in answers[question_number - 1]:
        if user_answer == answer[0]:
            if 'results' not in context.user_data:
                context.user_data['results'] = {}
            context.user_data['results'][answer[1]] = context.user_data['results'].get(answer[1], 0) + 1
            break

    if question_number < len(questions) - 1:
        next_question_number = question_number + 1
        reply_keyboard = [list(map(lambda x: x[0], answers[next_question_number]))]
        await update.message.reply_text(
            questions[next_question_number],
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
        )
        return next_question_number + 1
    else:
        return await result(update, context)

async def result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    final_class = max(context.user_data['results'], key=context.user_data['results'].get)
    await update.message.reply_text(f"–¢–≤–æ–π –∫–ª–∞—Å—Å: {final_class}. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /menu, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é.",reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return START_CHOICE
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    update.message.reply_text(reply_markup=ReplyKeyboardRemove())
    await update.message.reply_text('–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=ReplyKeyboardRemove())
        
    return ConversationHandler.END
async def send_notifications(bot):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, class FROM users')
    users = cursor.fetchall()
    conn.close()

    for user_id, user_class in users:
        message = "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞: {user_class}"
        try:
            await bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
async def send_menu_with_buttons(update_or_bot, user_id=None):
    bot = update_or_bot.bot if hasattr(update_or_bot, "bot") else update_or_bot
    
    # Determine the user_id based on context
    if user_id is None and hasattr(update_or_bot, "effective_user"):
        user_id = update_or_bot.effective_user.id
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    if user_id:
        # Fetch and send menu for a single user
        cursor.execute('SELECT username, class, image_path, speed, cunning, luck FROM users WHERE user_id = ?', (user_id,))
        users = [cursor.fetchone()]
    else:
        # Fetch and send menus for all users
        cursor.execute('SELECT user_id, username, class, image_path, speed, cunning, luck FROM users')
        users = cursor.fetchall()
    
    for user in users:
        if user_id:
            user = (user_id,) + user
    cursor.execute('SELECT user_id, username, class, image_path, speed, cunning, luck FROM users')
    for user in cursor.fetchall():
        user_id, username, character_class, image_path, speed, cunning, luck = user
        message = f"–ò–º—è: {username}\n–ö–ª–∞—Å—Å: {character_class}\n–°–∫–æ—Ä–æ—Å—Ç—å: {speed}, –•–∏—Ç—Ä–æ—Å—Ç—å: {cunning}, –£–¥–∞—á–∞: {luck}"

        keyboard = [
            [InlineKeyboardButton("–ö–≤–µ—Å—Ç—ã", callback_data='quests'),
             InlineKeyboardButton("–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data='offers')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=True)
        try:
            await bot.send_message(chat_id=user_id, text=message, reply_markup=reply_markup)
            if image_path and os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await bot.send_photo(chat_id=user_id, photo=photo)
            else:
                await bot.send_message(chat_id=user_id, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    conn.close()
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Assuming send_menu_with_buttons is adapted to work with an update object
    await send_menu_with_buttons(update)
    # Return an appropriate state or end the conversation
    return ConversationHandler.END 
# def get_all_registered_users():
#     """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
#     # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     conn = sqlite3.connect('users.db')
#     cursor = conn.cursor()

#     # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#     cursor.execute('SELECT user_id FROM users')
#     users = cursor.fetchall()

#     # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     conn.close()

#     # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
#     user_ids = [user[0] for user in users]
#     return user_ids
# async def send_welcome_message(bot):
#     users = get_all_registered_users()
#     for user in users:
#         # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è show_user_menu, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å bot.send_message
#         conn = sqlite3.connect('users.db')
#         cursor = conn.cursor()
#         cursor.execute('SELECT username, class, image_path, speed, cunning, luck FROM users WHERE user_id = ?', (user,))
#         user_data = cursor.fetchone()
#         conn.close()
        
#         if user_data:
#             username, character_class, image_path, speed, cunning, luck = user_data
#             message = f"–ò–º—è: {username}\n–ö–ª–∞—Å—Å: {character_class}\n–°–∫–æ—Ä–æ—Å—Ç—å: {speed}, –•–∏—Ç—Ä–æ—Å—Ç—å: {cunning}, –£–¥–∞—á–∞: {luck}"
#             await bot.send_message(chat_id=user, text=message)
#             if image_path and os.path.exists(image_path):
#                 await bot.send_photo(chat_id=user, photo=open(image_path, 'rb'))
#             else:
#                 await bot.send_message(chat_id=user, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
#         else:
#             # –≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç–∞–∫ –∫–∞–∫ users –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#             pass
async def send_special_quest(update: Update, context: ContextTypes.DEFAULT_TYPE, quest_id=None):
    conn = sqlite3.connect('quests_offers.db')
    cursor = conn.cursor()
    
    if quest_id is None:
        cursor.execute('SELECT * FROM quests ORDER BY RANDOM() LIMIT 1')
    else:
        cursor.execute('SELECT * FROM quests WHERE id = ?', (quest_id,))
    
    quest = cursor.fetchone()

    if quest is None:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    quest_id, title, description, image_url = quest
    cursor.execute('SELECT id FROM quests WHERE id < ? ORDER BY id DESC LIMIT 1', (quest_id,))
    prev_quest = cursor.fetchone()
    prev_quest_id = prev_quest[0] if prev_quest else None

    cursor.execute('SELECT id FROM quests WHERE id > ? ORDER BY id ASC LIMIT 1', (quest_id,))
    next_quest = cursor.fetchone()
    next_quest_id = next_quest[0] if next_quest else None

    message = f"*{quest['title']}*\n{quest['description']}"
    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –∫–≤–µ—Å—Ç", callback_data=f'quests:{next_quest_id}'),
         InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–≤–µ—Å—Ç", callback_data=f'quests:{prev_quest_id}')],
        [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if quest['image_url']:
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=quest['image_url'], caption=message, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=reply_markup, parse_mode="Markdown")


async def send_special_offers(update: Update, context: ContextTypes.DEFAULT_TYPE, offer_id=None):
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ offer_id, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω,
    # –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ offer_id=None
    # –¢–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è next_offer_id –∏ prev_offer_id

    offer = {"id": "offer_id", "title": "–°–∫–∏–¥–∫–∞ 50% –Ω–∞ –≤—Å–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!", "description": "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å!", "image_url": "http://example.com/offer.jpg"}
    next_offer_id = "next_offer_id"
    prev_offer_id = "prev_offer_id"

    message = f"*{offer['title']}*\n{offer['description']}"
    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f'offers:{next_offer_id}'),
         InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f'offers:{prev_offer_id}')],
        [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if offer['image_url']:
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=offer['image_url'], caption=message, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=reply_markup, parse_mode="Markdown")


async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("I am called")
    query = update.callback_query
    await query.answer()
    data = query.data   
    logger.info(f"Received callback query: {query.data}")
    if data.startswith('quests'):
        quest_id = data.split(':')[1]
        await send_special_quest(update, context, quest_id if len(data) > 1 else None)
    elif data.startswith('offers'):
        offer_id = data.split(':')[1]
        await send_special_offers(update, context, offer_id if len(data) > 1 else None)
    elif data.startswith('menu'):
        await show_user_menu(update, context)
#async def all_update_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#   logger.info(f"Received update: {update}")
def main():
    application = Application.builder().token("6564573865:AAFz0XogD4kPuoBsUqNq0PRbDs9ybn0i96E").build()
    conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        START_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, start_choice)],
        QUESTION_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: question_handler(update, context, 1))],
        QUESTION_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: question_handler(update, context, 2))],
        QUESTION_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: question_handler(update, context, 3))],
        QUESTION_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: question_handler(update, context, 4))],
        QUESTION_5: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: question_handler(update, context, 5))],
                
        RESULT: [MessageHandler(filters.TEXT & ~filters.COMMAND, result)],
        HELP: [MessageHandler(filters.Regex('^(üÜò –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å)$'), help)],
        MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_menu)],  # Add your MENU state here
    },
    fallbacks=[CommandHandler('cancel', cancel)],)
    #application.add_handler(MessageHandler(filters.ALL, all_update_handler)) # for DEBUG

    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('register', register))
    application.add_handler(CommandHandler('menu', show_user_menu))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_notifications, 'interval', seconds=130, args=[application.bot])
    #scheduler = AsyncIOScheduler()
    #scheduler.add_job(send_menu_with_buttons, 'interval', seconds=10, args=[application.bot])
    scheduler.start()

    loop = asyncio.get_event_loop()
    loop.create_task(application.run_polling())
    loop.run_forever()

if __name__ == '__main__':
    main()    
